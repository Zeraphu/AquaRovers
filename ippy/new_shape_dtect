import cv2
import numpy as np


def detect(c):
	shape = 'unknown'
    # calculate perimeter using
	peri = cv2.arcLength(c, True)
    # apply contour approximation and store the result in vertices
	vertices = cv2.approxPolyDP(c, 0.04 * peri, True)

    # If the shape it triangle, it will have 3 vertices
	if len(vertices) == 3:
		shape = 'triangle'

    # if the shape has 4 vertices, it is either a square or
    # a rectangle
	elif len(vertices) == 4:
        # using the boundingRect method calculate the width and height
        # of enclosing rectange and then calculte aspect ratio

		x, y, width, height = cv2.boundingRect(vertices)
		aspectRatio = float(width) / height
        # a square will have an aspect ratio that is approximately
        # equal to one, otherwise, the shape is a rectangle
		if aspectRatio >= 0.95 and aspectRatio <= 1.05:
			shape = "square"
		else:
			shape = "rectangle"
    # if the shape is a pentagon, it will have 5 vertices
	elif len(vertices) == 5:
		shape = "pentagon"

    # otherwise, we assume the shape is a circle
	elif len(vertices) == 10:
		shape = "star"
	else:
		shape = "circle"

    # return the name of the shape
	return shape


cap = cv2.VideoCapture(1)
while True:

	_, frame = cap.read()
	gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
	print(gray)
	v = np.median(gray)
	#print(v)
	sigma = 0.33
	low = int(max(0, (1-sigma)*v))
	high = int(max(255, (1+sigma)*v))
	canny = cv2.Canny(gray, low, high)
	contours, img = cv2.findContours(canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
	for c in contours:
		if cv2.contourArea(c)<1000:
			continue
		shape = detect(c)
		M = cv2.moments(c)
		x = int(M['m10']/M['m00'])
		y = int(M['m01']/M['m00'])
		cv2.putText(frame, shape, (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)
		cv2.drawContours(frame, [c], -1, (0, 255, 0), 2)

	cv2.imshow('canny', canny)
	cv2.imshow('frame', frame)

	if cv2.waitKey(1)&0xFF == 27:
		break

cap.release()		
cv2.destroyAllWindows()
