# import the necessary packages
import numpy as np
import imutils
from imutils import perspective
import cv2
import math
 
def find_marker(image):
#function for finding marker from saved image
	gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
	gray = cv2.GaussianBlur(gray, (5, 5), 0)
	edged = cv2.Canny(gray, 35, 125)
	cnts = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
	cnts = imutils.grab_contours(cnts)
	try:
		c = max(cnts, key = cv2.contourArea) 
	except:
		print("No contours detected")
 
	return cv2.minAreaRect(c)

def distance_to_camera(knownWidth, focalLength, perWidth):
#function for dynamically calculating distance
	return (knownWidth * focalLength) / perWidth

def midpoint(x,y):
	return (((x[0]+y[0])/2),((x[1]+y[1])/2))
def dist(x1,y1,x2,y2):
#function for calculating b and h of bounding box
	return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
#accessing saved image and calling findmarker()
KNOWN_DISTANCE = 7.00
KNOWN_WIDTH = 4.00
img = cv2.imread('/home/rohit/Pictures/Webcam/marker.jpg')
marker0 = find_marker(img)
focalLength = (marker0[1][0] * KNOWN_DISTANCE) / KNOWN_WIDTH
print(focalLength)

cap = cv2.VideoCapture(0)

while(1):
	
	(_,image) = cap.read()
#marker distance calculation start
	marker = find_marker(image)
	inches = distance_to_camera(KNOWN_WIDTH, focalLength, marker[1][0])
	box = cv2.boxPoints(marker)
	box = np.int0(box)
	cv2.drawContours(image, [box], -1, (0, 255, 0), 2)
	cv2.putText(image, "%.1fin" % (inches),(image.shape[1] - 200, image.shape[0] - 20), cv2.FONT_HERSHEY_SIMPLEX,2.0, (0, 255, 0), 3)
#marker distance calculated and displayed
	orig = image.copy()
	gray = cv2.cvtColor(orig, cv2.COLOR_BGR2GRAY)
	gray = cv2.GaussianBlur(gray, (5, 5), 0)
	edged = cv2.Canny(gray, 35, 125)
	c = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
	cnts = imutils.grab_contours(c)
	for i in cnts:
		if cv2.contourArea(i)<300:
			continue
		box = cv2.minAreaRect(i)
		box = cv2.boxPoints(box)
		box = np.array(box, dtype="int") 
		box = perspective.order_points(box)
		cv2.drawContours(orig, [box.astype("int")], -1, (0, 255, 0), 2)
 
# loop over the original points and draw them
		for (x, y) in box:
			cv2.circle(orig, (int(x), int(y)), 5, (0, 0, 255), -1) 	
	
		(tl, tr, br, bl) = box
		(tltrX, tltrY) = midpoint(tl, tr)
		(blbrX, blbrY) = midpoint(bl, br)
 
		(tlblX, tlblY) = midpoint(tl, bl)
		(trbrX, trbrY) = midpoint(tr, br)
# draw the midpoints on the image
		cv2.circle(orig, (int(tltrX), int(tltrY)), 5, (255, 0, 0), -1)
		cv2.circle(orig, (int(blbrX), int(blbrY)), 5, (255, 0, 0), -1)
		cv2.circle(orig, (int(tlblX), int(tlblY)), 5, (255, 0, 0), -1)
		cv2.circle(orig, (int(trbrX), int(trbrY)), 5, (255, 0, 0), -1)	
# draw lines between the midpoints
		cv2.line(orig, (int(tltrX), int(tltrY)), (int(blbrX), int(blbrY)),(255, 0, 255), 2)
		cv2.line(orig, (int(tlblX), int(tlblY)), (int(trbrX), int(trbrY)),(255, 0, 255), 2)
#finding distance using distance()
		b = dist(tlblX, tlblY,trbrX, trbrY)
		h = dist(tltrX, tltrY,blbrX, blbrY)
#convert them to inches
		inb = (b*inches)/focalLength
		inh = (h*inches)/focalLength
#formatting and displaying in orig window
		cv2.putText(orig, "{:.1f}in".format(inb), (int(tltrX), int(tltrY)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)
		cv2.putText(orig, "{:.1f}in".format(inh), (int(tlblX), int(tlblY)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)	
	
	cv2.imshow("image", image)	
	cv2.imshow('Contours',orig)

	if cv2.waitKey(1) & 0xFF == ord('q'):
		cap.release()
		cv2.destroyAllWindows()
