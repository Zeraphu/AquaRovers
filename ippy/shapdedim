from scipy.spatial import distance
from imutils import perspective
from imutils import contours
import imutils
import cv2
import numpy as np
import math

def midpoint(x,y):
	return (((x[0]+y[0])/2),((x[1]+y[1])/2))
def dist(x1,y1,x2,y2):
	return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

pi_per_l = None
f=None
cap = cv2.VideoCapture(0)

while(1):
	(_, frame) = cap.read()
	gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
	canny = cv2.Canny(gray, 50, 100)
	canny = cv2.dilate(canny, None, iterations=1)
	canny = cv2.erode(canny, None, iterations=1)
	(img,cnts,heir) = cv2.findContours(canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

	(cnts,_) = contours.sort_contours(cnts)	
	
	
	mu = [None]*len(cnts)
	for i in range(len(cnts)):
		if cv2.contourArea(cnts[i]) < 100:
			continue
 
	# compute the rotated bounding box of the contour
		orig = frame.copy()
		box = cv2.minAreaRect(cnts[i])
		box = cv2.boxPoints(box)
		box = np.array(box, dtype="int")
 
		box = perspective.order_points(box)
		cv2.drawContours(orig, [box.astype("int")], -1, (0, 255, 0), 2)
 
	# loop over the original points and draw them
		for (x, y) in box:
			cv2.circle(orig, (int(x), int(y)), 5, (0, 0, 255), -1) 	
	
		(tl, tr, br, bl) = box
		(tltrX, tltrY) = midpoint(tl, tr)
		(blbrX, blbrY) = midpoint(bl, br)
 
		(tlblX, tlblY) = midpoint(tl, bl)
		(trbrX, trbrY) = midpoint(tr, br)
	# draw the midpoints on the image
		cv2.circle(orig, (int(tltrX), int(tltrY)), 5, (255, 0, 0), -1)
		cv2.circle(orig, (int(blbrX), int(blbrY)), 5, (255, 0, 0), -1)
		cv2.circle(orig, (int(tlblX), int(tlblY)), 5, (255, 0, 0), -1)
		cv2.circle(orig, (int(trbrX), int(trbrY)), 5, (255, 0, 0), -1)	
	# draw lines between the midpoints
		cv2.line(orig, (int(tltrX), int(tltrY)), (int(blbrX), int(blbrY)),(255, 0, 255), 2)
		cv2.line(orig, (int(tlblX), int(tlblY)), (int(trbrX), int(trbrY)),(255, 0, 255), 2)		
		b = dist(tlblX, tlblY,trbrX, trbrY)
		h = dist(tltrX, tltrY,blbrX, blbrY)
		b = b
		h = h
		inb = None
		inh = None
		#if i==0:
		#	f = b*20/3.5
		#	d = f*3.5/b
		#elif i>0:
		#	inb = f*b/d
		#	inh = f*h/d			

		#if pi_per_l is None:
		#	pi_per_l = 
		#print(pi_per_l)
		#inb = (b/frame.shape[1])
		#inh = (b/frame.shape[0])

	#cv2.putText(orig, "{:.1f}in".format(d), (10,10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
	#if inb != None: 
	cv2.putText(orig, "{:.1f}in".format(b), (int(tltrX), int(tltrY)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)
	cv2.putText(orig, "{:.1f}in".format(h), (int(tlblX), int(tlblY)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)
	cv2.imshow('Canny',canny)
	cv2.imshow('Contours',orig)
	if cv2.waitKey(1)&0xFF == ord('q'):
		cap.release()
		cv2.destroyAllWindows()
