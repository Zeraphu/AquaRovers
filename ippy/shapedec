import cv2
import imutils
import numpy as np
import random as rng

rng.seed(12345)

cap = cv2.VideoCapture(0)
def detect(c):
		# initialize the shape name and approximate the contour
    shape = "unidentified"
    peri = cv2.arcLength(c, True)
    approx = cv2.approxPolyDP(c, 0.04 * peri, True)
    if len(approx) == 3:
        shape = "triangle" 
 
		# if the shape has 4 vertices, it is either a square or
		# a rectangle
    elif len(approx) == 4:
			# compute the bounding box of the contour and use the
			# bounding box to compute the aspect ratio
        (x, y, w, h) = cv2.boundingRect(approx)
        ar = w/h
 
			# a square will have an aspect ratio that is approximately
			# equal to one, otherwise, the shape is a rectangle
        shape = "square" if ar >= 0.95 and ar <= 1.05 else "rectangle"
 
		# if the shape is a pentagon, it will have 5 vertices
    elif len(approx) == 5:
        shape = "pentagon"
 
		# otherwise, we assume the shape is a circle
    else:
        shape = "circle"
 
		# return the name of the shape
    return shape

while(1):

    # Take each frame
    _, frame = cap.read()
   
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    #thresh = cv2.threshold(blurred, 60, 255, cv2.THRESH_BINARY)[1]
    #res = cv2.bitwise_and(frame,frame,mask=thresh)
    canny = cv2.Canny(gray,100,255)
    (img,contours,hier)=cv2.findContours(canny, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
    #cnts=imutils.grab_contours(cnts)

    #for c in cnts:
    #Get the moments
    mu = [None]*len(contours)
    for i in range(len(contours)):
        mu[i] = cv2.moments(contours[i])

    #Get the mass center
    mc = [None]*len(contours)
    for i in range(len(contours)):
    #add 1e-5 to avoid division by zero
        mc[i] = (mu[i]['m10'] / (mu[i]['m00'] + 1e-5), mu[i]['m01'] / (mu[i]['m00'] + 1e-5))

    drawing = np.zeros((canny.shape[0], canny.shape[1], 3), dtype=np.uint8)
    
    for i in range(len(contours)):
        color = (rng.randint(0,256), rng.randint(0,256), rng.randint(0,256))
        cv2.drawContours(drawing, contours, i, color, 2)
        cv2.circle(drawing, (int(mc[i][0]), int(mc[i][1])), 4, color, -1)
      

    cX = int((M["m10"] / M["m00"]))
    cY = int((M["m01"] / M["m00"]))
    shape = detect(c)
    cv2.imshow('Contours', drawing)
    cv2.drawContours(frame, [c], -1, (0, 255, 0), 2)
    cv2.putText(frame, shape, (cX, cY), cv2.FONT_HERSHEY_SIMPLEX,0.5, (255, 255, 255), 2)
    
    #cv2.imshow('Threshim',thresh)
    cv2.imshow('Detected shapes',frame)

    if cv2.waitKey(5) & 0xFF == ord('q'):
        break

cv2.destroyAllWindows()
